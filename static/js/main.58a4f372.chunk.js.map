{"version":3,"sources":["components/ProtectedRoute.js","context/QuestionContext.js","context/ScoreContext.js","components/AnswerButton.js","components/QuizCard.js","components/SubmitModal.js","components/QuizContainer.js","components/ResultScreen.js","App.js","serviceWorker.js","index.js"],"names":["ProtectedRoute","Component","component","rest","routeCondition","path","redirectPath","render","props","to","pathname","state","alertMsg","QuestionContext","createContext","QuestionContextProvider","useState","questIndex","setQuestIndex","submitQuiz","setSubmitQuiz","questText","correctAns","userAns","undefined","answered","allOptions","questions","setQuestions","isLastQuestion","length","ansAllQuest","every","quest","Provider","value","markAnswered","ind","map","i","children","ScoreContext","ScoreContextProvider","userScore","setUserScore","increaseScore","useStyles","makeStyles","button","width","marginTop","borderRadius","height","border","color","fontSize","buttonFilled","backgroundColor","AnswerButton","classes","useContext","option","Button","className","onClick","card","maxWidth","margin","paper","padding","QuizCard","question","Paper","elevation","style","Grid","container","opt","item","xs","sm","theme","modal","display","alignItems","justifyContent","palette","background","boxShadow","shadows","spacing","submitBbutton","withRouter","open","setOpen","handleClose","type","size","variant","Modal","aria-labelledby","aria-describedby","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","id","localStorage","setItem","history","push","marginLeft","QuizContainer","Container","location","Alert","icon","severity","textAlign","marginRight","IconButton","bodyText","headingText","ResultScreen","TableContainer","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","index","key","removeItem","App","submitQuizVar","JSON","parse","getItem","React","useEffect","AppBar","position","fontFamily","exact","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.58a4f372.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\nconst ProtectedRoute = ({ component: Component, ...rest }) => {\r\n  const routeCondition = rest.routeCondition;\r\n  const path = rest.redirectPath;\r\n  //React.useEffect(() => console.log(rest));\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={props => {\r\n        if (routeCondition) {\r\n          return <Component {...props} />;\r\n        } else {\r\n          return (\r\n            <Redirect\r\n              to={{ pathname: path, state: { alertMsg: rest.alertMsg } }}\r\n            />\r\n          );\r\n        }\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ProtectedRoute;\r\n","import React, { useState, createContext } from \"react\";\r\n\r\nexport const QuestionContext = createContext();\r\n\r\nconst QuestionContextProvider = props => {\r\n  const [questIndex, setQuestIndex] = useState(0);\r\n  // eslint-disable-next-line\r\n  const [submitQuiz, setSubmitQuiz] = useState(false);\r\n\r\n  const [questions, setQuestions] = useState([\r\n    {\r\n      questText: \"Who discovered gravity?\",\r\n      correctAns: \"Isaac Newton\",\r\n      userAns: undefined,\r\n      answered: false,\r\n      allOptions: [\r\n        \"Nickola Tesla\",\r\n        \"Albert Einstein\",\r\n        \"Isaac Newton\",\r\n        \"Michael Jackson\"\r\n      ]\r\n    },\r\n    {\r\n      questText: \"Which metal is liquid at room temperature?\",\r\n      correctAns: \"Mercury\",\r\n      userAns: undefined,\r\n      answered: false,\r\n      allOptions: [\"Mercury\", \"Iron\", \"Copper\", \"Gold\"]\r\n    },\r\n    {\r\n      questText: \"Which one of these is not a starter Pokemon?\",\r\n      correctAns: \"Agumon\",\r\n      userAns: undefined,\r\n      answered: false,\r\n      allOptions: [\"Bulbasaur\", \"Agumon\", \"Charizard\", \"Squirtle\"]\r\n    },\r\n    {\r\n      questText: \"Which of these is the largest continent of the world?\",\r\n      correctAns: \"Asia\",\r\n      userAns: undefined,\r\n      answered: false,\r\n      allOptions: [\"Africa\", \"Asia\", \"Australia\", \"Europe\"]\r\n    },\r\n    {\r\n      questText: \"Oil, Natural gas, and coal are examples of...\",\r\n      correctAns: \"Fossil Fuels\",\r\n      userAns: undefined,\r\n      answered: false,\r\n      allOptions: [\r\n        \"Renewable resources\",\r\n        \"Biofuels\",\r\n        \"Geothermal resources\",\r\n        \"Fossil Fuels\"\r\n      ]\r\n    }\r\n  ]);\r\n  let isLastQuestion = questIndex < questions.length - 1 ? false : true;\r\n  let ansAllQuest = questions.every(quest => quest.answered === true);\r\n\r\n  const markAnswered = (ind, userAns) => {\r\n    setQuestions(\r\n      questions.map((quest, i) => {\r\n        return i === ind\r\n          ? { ...quest, answered: true, userAns: userAns }\r\n          : quest;\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <QuestionContext.Provider\r\n      value={{\r\n        questions,\r\n        questIndex,\r\n        setQuestIndex,\r\n        isLastQuestion,\r\n        ansAllQuest,\r\n        markAnswered,\r\n        submitQuiz,\r\n        setSubmitQuiz,\r\n        setQuestions\r\n      }}\r\n    >\r\n      {props.children}\r\n    </QuestionContext.Provider>\r\n  );\r\n};\r\n\r\nexport default QuestionContextProvider;\r\n","import React, { useState, createContext } from \"react\";\r\n\r\nexport const ScoreContext = createContext();\r\n\r\nconst ScoreContextProvider = props => {\r\n  const [userScore, setUserScore] = useState(0);\r\n\r\n  const increaseScore = () => {\r\n    setUserScore(userScore + 10);\r\n  };\r\n  return (\r\n    <ScoreContext.Provider value={{ userScore, increaseScore, setUserScore }}>\r\n      {props.children}\r\n    </ScoreContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ScoreContextProvider;\r\n","import React, { useContext } from \"react\";\r\nimport { QuestionContext } from \"../context/QuestionContext\";\r\nimport { ScoreContext } from \"../context/ScoreContext\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n  button: {\r\n    width: \"80%\",\r\n    marginTop: \"5%\",\r\n    borderRadius: \"15px\",\r\n    height: \"70%\",\r\n    border: \"3px solid #5794ff\",\r\n    color: \"#5794ff\",\r\n    fontSize: \"16px\"\r\n  },\r\n  buttonFilled: {\r\n    width: \"80%\",\r\n    marginTop: \"7%\",\r\n    borderRadius: \"15px\",\r\n    height: \"70%\",\r\n    backgroundColor: \"#5794ff\",\r\n    color: \"#ffffff\",\r\n    fontSize: \"16px\"\r\n  }\r\n});\r\n\r\nconst AnswerButton = props => {\r\n  const classes = useStyles();\r\n  const {\r\n    questIndex,\r\n    setQuestIndex,\r\n    isLastQuestion,\r\n    markAnswered\r\n  } = useContext(QuestionContext);\r\n  const { increaseScore } = useContext(ScoreContext);\r\n\r\n  const { option, correctAns, userAns } = props;\r\n  const checkAnswer = ans => {\r\n    if (ans === correctAns) {\r\n      increaseScore();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      //variant={userAns === option ? \"outlined\" : \"contained\"}\r\n      className={userAns === option ? classes.button : classes.buttonFilled}\r\n      onClick={() => {\r\n        markAnswered(questIndex, option);\r\n\r\n        if (!isLastQuestion) {\r\n          setQuestIndex(questIndex + 1);\r\n        }\r\n        checkAnswer(option);\r\n      }}\r\n    >\r\n      {option}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default AnswerButton;\r\n","import React from \"react\";\r\nimport AnswerButton from \"./AnswerButton\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n// import Card from \"@material-ui/core/Card\";\r\n// import CardActions from \"@material-ui/core/CardActions\";\r\n// import CardContent from \"@material-ui/core/CardContent\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    maxWidth: \"90%\",\r\n    margin: \"auto\"\r\n  },\r\n  paper: { padding: \"6% 2%\", margin: \"0% 5% 10% 5%\", borderRadius: \"20px\" }\r\n});\r\n\r\nconst QuizCard = props => {\r\n  const classes = useStyles();\r\n  const { questText, correctAns, allOptions, userAns } = props.question;\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.card}>\r\n        <Paper elevation={10} className={classes.paper}>\r\n          <div style={{ fontSize: \"80%\" }}>{questText}</div>\r\n        </Paper>\r\n        <Grid container>\r\n          {allOptions.map(opt => {\r\n            return (\r\n              <Grid item xs={12} sm={6}>\r\n                <AnswerButton\r\n                  option={opt}\r\n                  correctAns={correctAns}\r\n                  userAns={userAns}\r\n                />\r\n              </Grid>\r\n            );\r\n          })}\r\n        </Grid>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizCard;\r\n\r\n// <Grid item xs={6}>\r\n// <AnswerButton option=\"A\" correctAns={correctAns} />\r\n// </Grid>\r\n","import React, { useState, useContext } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\nimport { QuestionContext } from \"../context/QuestionContext\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  modal: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\"\r\n  },\r\n  paper: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3)\r\n  },\r\n  submitBbutton: {\r\n    width: \"82%\",\r\n    marginTop: \"10%\",\r\n    borderRadius: \"15px\",\r\n    backgroundColor: \"#ffffff\",\r\n    border: \"1px solid  #1E88E5 \",\r\n    \"&:hover\": {\r\n      backgroundColor: \" #5794ff \",\r\n      color: \"white\"\r\n    }\r\n  }\r\n}));\r\nconst SubmitModal = props => {\r\n  const classes = useStyles();\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const { ansAllQuest, setSubmitQuiz } = useContext(QuestionContext);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        type=\"button\"\r\n        size=\"large\"\r\n        onClick={handleOpen}\r\n        className={classes.submitBbutton}\r\n        variant=\"contained\"\r\n      >\r\n        Submit\r\n      </Button>\r\n      <Modal\r\n        aria-labelledby=\"transition-modal-title\"\r\n        aria-describedby=\"transition-modal-description\"\r\n        className={classes.modal}\r\n        open={open}\r\n        onClose={handleClose}\r\n        closeAfterTransition\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{\r\n          timeout: 500\r\n        }}\r\n      >\r\n        <Fade in={open}>\r\n          <div className={classes.paper}>\r\n            {ansAllQuest ? (\r\n              <p id=\"transition-modal-description\">\r\n                Submit your quiz? You can't change your answers after\r\n                submission.\r\n              </p>\r\n            ) : (\r\n              <p id=\"transition-modal-description\">\r\n                You haven't attempted all questions. Are you sure you want to\r\n                submit?\r\n              </p>\r\n            )}\r\n            <Button\r\n              onClick={() => {\r\n                setSubmitQuiz(true);\r\n                localStorage.setItem(\"submitQuiz\", true);\r\n\r\n                props.history.push(\"/results\");\r\n              }}\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n            >\r\n              Submit\r\n            </Button>\r\n            <Button\r\n              onClick={handleClose}\r\n              variant=\"outlined\"\r\n              color=\"secondary\"\r\n              style={{ marginLeft: \"2%\" }}\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n        </Fade>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(SubmitModal);\r\n","import React, { useContext } from \"react\";\r\nimport QuizCard from \"./QuizCard\";\r\nimport SubmitModal from \"./SubmitModal\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { QuestionContext } from \"../context/QuestionContext\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\r\nimport ArrowLeftIcon from \"@material-ui/icons/ArrowLeft\";\r\n\r\nconst QuizContainer = props => {\r\n  const { questions, questIndex, setQuestIndex, isLastQuestion } = useContext(\r\n    QuestionContext\r\n  );\r\n  //React.useEffect(() => console.log(props.location));\r\n  return (\r\n    <div>\r\n      <Container>\r\n        {props.location.state && (\r\n          <Alert icon={false} severity=\"error\">\r\n            {props.location.state.alertMsg}\r\n          </Alert>\r\n        )}\r\n        <div style={{ textAlign: \"right\", marginRight: \"12%\" }}>\r\n          <IconButton\r\n            onClick={() => {\r\n              if (questIndex > 0) setQuestIndex(questIndex - 1);\r\n            }}\r\n          >\r\n            <ArrowLeftIcon />\r\n          </IconButton>\r\n          <span style={{ fontSize: \"15px\" }}>\r\n            {questIndex + 1} / {questions.length}\r\n          </span>\r\n          <IconButton\r\n            onClick={() => {\r\n              if (!isLastQuestion) setQuestIndex(questIndex + 1);\r\n            }}\r\n          >\r\n            <ArrowRightIcon />\r\n          </IconButton>\r\n        </div>\r\n\r\n        <QuizCard\r\n          question={questions[questIndex]}\r\n          style={{ marginTop: \"0px\" }}\r\n        />\r\n        <SubmitModal />\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizContainer;\r\n","import React, { useContext } from \"react\";\r\nimport { QuestionContext } from \"../context/QuestionContext\";\r\nimport { ScoreContext } from \"../context/ScoreContext\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n//import { flexbox } from \"@material-ui/system\";\r\n\r\nconst useStyles = makeStyles({\r\n  button: {\r\n    marginTop: \"5%\",\r\n    backgroundColor: \" #5794ff\",\r\n    color: \"#ffffff\",\r\n    width: \"100%\",\r\n    border: \"1px solid   #5794ff\",\r\n    borderRadius: \"15px\",\r\n    \"&:hover\": {\r\n      backgroundColor: \" #ffffff \",\r\n      color: \"black\",\r\n      border: \"1px solid   #ffffff\"\r\n    }\r\n  },\r\n  bodyText: {\r\n    fontSize: \"18px\"\r\n  },\r\n  headingText: {\r\n    fontSize: \"20px\"\r\n  }\r\n});\r\nconst ResultScreen = props => {\r\n  const classes = useStyles();\r\n\r\n  const { questions, setSubmitQuiz, setQuestIndex, setQuestions } = useContext(\r\n    QuestionContext\r\n  );\r\n  const { setUserScore } = useContext(ScoreContext);\r\n  const resetQuiz = () => {\r\n    setQuestions(\r\n      questions.map(quest => {\r\n        return { ...quest, answered: false, userAns: undefined };\r\n      })\r\n    );\r\n    setSubmitQuiz(false);\r\n    localStorage.removeItem(\"submitQuiz\"); //setting the key to false was not working for some reason\r\n    setQuestIndex(0);\r\n    setUserScore(0);\r\n    props.history.push(\"/\");\r\n  };\r\n  // React.useEffect(() =>\r\n  //   console.log(JSON.parse(localStorage.getItem(\"submitQuiz\")))\r\n  // );\r\n\r\n  return (\r\n    <Container style={{ marginTop: \"10%\" }}>\r\n      {props.location.state && (\r\n        <Alert icon={false} severity=\"error\">\r\n          {props.location.state.alertMsg}\r\n        </Alert>\r\n      )}\r\n      <TableContainer component={Paper}>\r\n        <Table aria-label=\"simple table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell align=\"center\" className={classes.headingText}>\r\n                Q.No\r\n              </TableCell>\r\n              <TableCell align=\"center\" className={classes.headingText}>\r\n                Correct?\r\n              </TableCell>\r\n              <TableCell align=\"center\" className={classes.headingText}>\r\n                Correct Answer\r\n              </TableCell>\r\n              <TableCell align=\"center\" className={classes.headingText}>\r\n                You Answered\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {questions.map((question, index) => (\r\n              <TableRow key={index}>\r\n                <TableCell align=\"center\" className={classes.bodyText}>\r\n                  {index + 1}\r\n                </TableCell>\r\n                <TableCell align=\"center\" className={classes.bodyText}>\r\n                  {question.userAns === question.correctAns ? (\r\n                    <CheckIcon style={{ color: \"green\" }} />\r\n                  ) : (\r\n                    <CloseIcon style={{ color: \"red\" }} />\r\n                  )}\r\n                </TableCell>\r\n                <TableCell align=\"center\" className={classes.bodyText}>\r\n                  {question.correctAns}\r\n                </TableCell>\r\n                <TableCell align=\"center\" className={classes.bodyText}>\r\n                  {question.userAns || \"Unattempted\"}\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <Button\r\n        className={classes.button}\r\n        variant=\"contained\"\r\n        onClick={() => {\r\n          resetQuiz();\r\n        }}\r\n      >\r\n        Reset\r\n      </Button>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ResultScreen;\r\n","import React, { useContext } from \"react\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport ProtectedRoute from \"./components/ProtectedRoute\";\r\nimport QuizContainer from \"./components/QuizContainer\";\r\nimport ScoreContextProvider from \"./context/ScoreContext\";\r\nimport ResultScreen from \"./components/ResultScreen\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport { QuestionContext } from \"./context/QuestionContext\";\r\n\r\nfunction App() {\r\n  // #region Explanation Comment\r\n  // We can access QuestionContext here because we wrapped the App component tag in index.js file with the QuestionContextProvider. Otherwise, if we only wrapped the components which the ScoreContextProvider is wrapping, we could not access the QuestionContext here, and we getting an error that stated: \"useContext is undefined\"\r\n  // I needed to use LocalStorage here because pressing the back button twice in the result screen overwrote the state and the submitQuiz variable so the user was taken back even though they shouldnot be allowed to.\r\n  //I'm resetting submitQuizVar inside useEffect because the app component wasn't rerendering when setSubmitQuiz was running and becasue of that the updated localStorage item wasn't being recieved here\r\n  // #endregion\r\n  const { submitQuiz } = useContext(QuestionContext);\r\n  let submitQuizVar = JSON.parse(localStorage.getItem(\"submitQuiz\"));\r\n  React.useEffect(() => {\r\n    // eslint-disable-next-line\r\n    submitQuizVar = JSON.parse(localStorage.getItem(\"submitQuiz\"));\r\n  }, [submitQuiz]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {/* <h2 style={{ fontFamily: \"Merriweather, serif\" }}>React Quiz App</h2> */}\r\n      <AppBar\r\n        position=\"static\"\r\n        style={{ height: \"100px\", backgroundColor: \"#5794ff\" }}\r\n      >\r\n        <h4 style={{ fontFamily: \"Merriweather, serif\" }}>React Quiz App</h4>\r\n      </AppBar>\r\n      <ScoreContextProvider>\r\n        <Router>\r\n          <ProtectedRoute\r\n            exact\r\n            path=\"/\"\r\n            redirectPath=\"/results\"\r\n            alertMsg=\"Please press the reset button to retake the quiz.\"\r\n            component={QuizContainer}\r\n            routeCondition={!submitQuizVar}\r\n          />\r\n          <ProtectedRoute\r\n            exact\r\n            path=\"/results\"\r\n            redirectPath=\"/\"\r\n            alertMsg=\"Please submit the exam to view the result.\"\r\n            component={ResultScreen}\r\n            routeCondition={submitQuizVar}\r\n          />\r\n        </Router>\r\n      </ScoreContextProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n//redirectTo={ResultScreen} routeCondition={!submitQuiz}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport QuestionContextProvider from \"./context/QuestionContext\";\r\n\r\nReactDOM.render(\r\n  <QuestionContextProvider>\r\n    <App />\r\n  </QuestionContextProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}